'use strict'; // code generated by pbf v3.2.1

// Player ========================================

var Player  = {};

Player.read = function (pbf, end) {
    return pbf.readFields(Player._readField, {x: 0, y: 0, angle: 0}, end);
};
Player._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.x = pbf.readFloat();
    else if (tag === 2) obj.y = pbf.readFloat();
    else if (tag === 3) obj.angle = pbf.readFloat();
};
Player.write = function (obj, pbf) {
    if (obj.x) pbf.writeFloatField(1, obj.x);
    if (obj.y) pbf.writeFloatField(2, obj.y);
    if (obj.angle) pbf.writeFloatField(3, obj.angle);
};

// Zombie ========================================

var Zombie = {};

Zombie.read = function (pbf, end) {
    return pbf.readFields(Zombie._readField, {x: 0, y: 0, angle: 0}, end);
};
Zombie._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.x = pbf.readFloat();
    else if (tag === 2) obj.y = pbf.readFloat();
    else if (tag === 3) obj.angle = pbf.readFloat();
};
Zombie.write = function (obj, pbf) {
    if (obj.x) pbf.writeFloatField(1, obj.x);
    if (obj.y) pbf.writeFloatField(2, obj.y);
    if (obj.angle) pbf.writeFloatField(3, obj.angle);
};

// Bullet ========================================

var Bullet  = {};

Bullet.read = function (pbf, end) {
    return pbf.readFields(Bullet._readField, {x: 0, y: 0}, end);
};
Bullet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.x = pbf.readFloat();
    else if (tag === 2) obj.y = pbf.readFloat();
};
Bullet.write = function (obj, pbf) {
    if (obj.x) pbf.writeFloatField(1, obj.x);
    if (obj.y) pbf.writeFloatField(2, obj.y);
};

// State ========================================

var State = {};

State.read = function (pbf, end) {
    return pbf.readFields(State._readField, {last_seq: 0, players: [], zombies: [], bullets: []}, end);
};
State._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.last_seq = pbf.readVarint();
    else if (tag === 2) obj.players.push(Player.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.zombies.push(Zombie.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.bullets.push(Bullet.read(pbf, pbf.readVarint() + pbf.pos));
};
State.write = function (obj, pbf) {
    if (obj.last_seq) pbf.writeVarintField(1, obj.last_seq);
    if (obj.players) for (var i = 0; i < obj.players.length; i++) pbf.writeMessage(2, Player.write, obj.players[i]);
    if (obj.zombies) for (i = 0; i < obj.zombies.length; i++) pbf.writeMessage(3, Zombie.write, obj.zombies[i]);
    if (obj.bullets) for (i = 0; i < obj.bullets.length; i++) pbf.writeMessage(4, Bullet.write, obj.bullets[i]);
};

// GameInput ========================================

var GameInput = {};

GameInput.read = function (pbf, end) {
    return pbf.readFields(GameInput._readField, {move: 0, look: 0, moving: false, shooting: false}, end);
};
GameInput._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.move = pbf.readFloat();
    else if (tag === 2) obj.look = pbf.readFloat();
    else if (tag === 3) obj.moving = pbf.readBoolean();
    else if (tag === 4) obj.shooting = pbf.readBoolean();
};
GameInput.write = function (obj, pbf) {
    if (obj.move) pbf.writeFloatField(1, obj.move);
    if (obj.look) pbf.writeFloatField(2, obj.look);
    if (obj.moving) pbf.writeBooleanField(3, obj.moving);
    if (obj.shooting) pbf.writeBooleanField(4, obj.shooting);
};
